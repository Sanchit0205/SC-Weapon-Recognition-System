import cv2
from flask import Flask, Response
from ultralytics import YOLO

app = Flask(__name__)
yolo_model = YOLO('flask-server\\train4\\weights\\best.pt') 

def generate_frames():
    video_capture = cv2.VideoCapture(0)
    while True:
        try:
            ret, frame = video_capture.read()
            if not ret:
                break

            results = yolo_model(frame)

            for result in results:
                classes = result.names
                cls = result.boxes.cls
                conf = result.boxes.conf
                detections = result.boxes.xyxy

                for pos, detection in enumerate(detections):
                    if conf[pos] >= 0.8:
                        xmin, ymin, xmax, ymax = detection
                        label = f"{classes[int(cls[pos])]} {conf[pos]:.2f}"

                        if conf[pos] > 0.85:
                            font_scale = 1.0
                            thickness = 2
                            color = (0, 255, 0)  # Green color for high-confidence labels
                        else:
                            font_scale = 0.5
                            thickness = 1
                            color = (0, 0, 255)  # Red color for lower-confidence labels

                        cv2.rectangle(frame, (int(xmin), int(ymin)), (int(xmax), int(ymax)), color, 2)
                        cv2.putText(frame, label, (int(xmin), int(ymin) - 10), cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, thickness, cv2.LINE_AA)

            (flag, encodedImage) = cv2.imencode(".jpg", frame)
            if not flag:
                continue
            yield (b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' + bytearray(encodedImage) + b'\r\n')
        except Exception as e:
            print(f"Error: {e}")
            break
    video_capture.release()

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(debug=True, threaded=True)








--------------=============================---------------------------------------------------------------------



import os
import cv2
from flask import Flask, Response
from ultralytics import YOLO

app = Flask(__name__)

# Construct the relative path
current_dir = os.path.dirname(os.path.abspath(__file__))
model_path = os.path.join(current_dir, 'train4', 'weights', 'best.pt')

# Check if the model file exists
if not os.path.exists(model_path):
    raise FileNotFoundError(f"No such file: '{model_path}'")

# Load the YOLO model
yolo_model = YOLO(model_path)

def generate_frames():
    video_capture = cv2.VideoCapture(0)
    while True:
        try:
            ret, frame = video_capture.read()
            if not ret:
                break

            results = yolo_model(frame)

            for result in results:
                classes = result.names
                cls = result.boxes.cls
                conf = result.boxes.conf
                detections = result.boxes.xyxy

                for pos, detection in enumerate(detections):
                    if conf[pos] >= 0.8:
                        xmin, ymin, xmax, ymax = detection
                        label = f"{classes[int(cls[pos])]} {conf[pos]:.2f}"

                        if conf[pos] > 0.85:
                            font_scale = 1.0
                            thickness = 2
                            color = (0, 255, 0)  # Green color for high-confidence labels
                        else:
                            font_scale = 0.5
                            thickness = 1
                            color = (0, 0, 255)  # Red color for lower-confidence labels

                        cv2.rectangle(frame, (int(xmin), int(ymin)), (int(xmax), int(ymax)), color, 2)
                        cv2.putText(frame, label, (int(xmin), int(ymin) - 10), cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, thickness, cv2.LINE_AA)

            (flag, encodedImage) = cv2.imencode(".jpg", frame)
            if not flag:
                continue
            yield (b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' + bytearray(encodedImage) + b'\r\n')
        except Exception as e:
            print(f"Error: {e}")
            break
    video_capture.release()

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(debug=True, threaded=True)
